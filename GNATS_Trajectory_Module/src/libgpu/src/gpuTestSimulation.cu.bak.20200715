#include "gpuTestSimulation.h"

#include "cuda_compat.h"

#include "cuda_runtime_api.h"
#include "device_functions.h"

//#include "CUDA_Aircraft_new.h"

#include <iostream>
#include <cstdio>

float a, b, c;// host copies of a, b, c
__device__ float *dev_a, *dev_b, *dev_c;



__device__ void gpuTest_func3_dev() {
	printf("gpuTest_func3_dev() starting\n");

	*dev_c = *dev_a + *dev_b;
}

__global__ void gpuTest_func1_struct(TestKernelParameters* structA) {
	printf("gpuTest_func1()_struct starting\n");

	structA->latitude_deg = 4.4;
}

__global__ void gpuTest_func1(float* a, float* b, float* c) {
	printf("gpuTest_func1() starting\n");

	*c = *a + *b;
}

__global__ void gpuTest_func2() {
	printf("gpuTest_func2() starting\n");
	printf("gpuTest_func2() --> dev_a = %f\n", *dev_a);

	*dev_c = *dev_a + *dev_b;
}

__global__ void gpuTest_func3() {
	printf("gpuTest_func3() starting\n");

	gpuTest_func3_dev();
}






int propagate_flights_gpuTest(const float& input_t_end,
		const float& input_t_step,
		const float& input_t_step_terminal,
		const float& input_t_step_airborne) {
	float a, b, c;// host copies of a, b, c
	float *d_a, *d_b, *d_c;// device copies of a, b, c

	int size = sizeof(float);// Allocate space for device copies of a, b, c

	cudaMalloc((void**)&d_a, size);
	cudaMalloc((void**)&d_b, size);
	cudaMalloc((void**)&d_c, size);

	a = 2;
	b = 7;

	cudaMemcpy(d_a, &a, size, cudaMemcpyHostToDevice);
	cudaMemcpy(d_b, &b, size, cudaMemcpyHostToDevice);


	printf("(BEFORE) c = %f\n", c);

	gpuTest_func1<<<1, 1>>>(d_a, d_b, d_c);

	// Does not work
	//gpuTest_func2<<<1, 1>>>();

	printf("(AFTER) c = %f\n", c);

	cudaMemcpy(&c, d_c, size, cudaMemcpyDeviceToHost);

	printf("(AFTER cudaMemcpy) c = %f\n", c);






	cudaFree(d_a);
	cudaFree(d_b);
	cudaFree(d_c);

	return 0;
}






/*
int propagate_flights_gpuTest(const float& input_t_end,
		const float& input_t_step,
		const float& input_t_step_terminal,
		const float& input_t_step_airborne) {

	float *d_a, *d_b, *d_c;// device copies of a, b, c

	int size = sizeof(float);// Allocate space for device copies of a, b, c

	cudaMalloc((void**)&d_a, size);
	cudaMalloc((void**)&d_b, size);
	cudaMalloc((void**)&d_c, size);

	a = 2;
	b = 7;

	//cudaMemcpy(d_a, &a, size, cudaMemcpyHostToDevice);
	//cudaMemcpy(d_b, &b, size, cudaMemcpyHostToDevice);

	cudaMemcpyToSymbol(dev_a, &a, sizeof(float), 0, cudaMemcpyHostToDevice);
	cudaMemcpyToSymbol(dev_b, &b, sizeof(float), 0, cudaMemcpyHostToDevice);




	printf("(BEFORE) c = %f\n", c);

	//gpuTest_func1<<<1, 1>>>(d_a, d_b, d_c);

	// Does not work
	gpuTest_func3<<<1, 1>>>();






	printf("(AFTER) c = %f\n", c);

	//cudaMemcpy(&c, d_c, size, cudaMemcpyDeviceToHost);
	cudaMemcpyToSymbol(&c, dev_c, sizeof(float), 0, cudaMemcpyDeviceToHost);

	printf("(AFTER cudaMemcpy) c = %f\n", c);






	cudaFree(d_a);
	cudaFree(d_b);
	cudaFree(d_c);

	return 0;
}
*/





/*
int propagate_flights_gpuTest_1_struct(const float& input_t_end,
		const float& input_t_step,
		const float& input_t_step_terminal,
		const float& input_t_step_airborne) {
	float a, b, c;// host copies of a, b, c
	float *d_a, *d_b, *d_c;// device copies of a, b, c

	TestKernelParameters structA;
	TestKernelParameters* d_structA;

	int size = sizeof(float);// Allocate space for device copies of a, b, c

	cudaMalloc((void**)&d_a, size);
	cudaMalloc((void**)&d_b, size);
	cudaMalloc((void**)&d_c, size);

	//cudaMalloc((void**)&d_structA, sizeof(TestKernelParameters));
	cudaMalloc((void**)&(d_structA->latitude_deg), sizeof(float));

	a = 2;
	b = 7;

	structA.latitude_deg = 2.0;

	cudaMemcpy(d_a, &a, size, cudaMemcpyHostToDevice);
	cudaMemcpy(d_b, &b, size, cudaMemcpyHostToDevice);

	//cudaMemcpy(d_structA, &structA, sizeof(TestKernelParameters), cudaMemcpyHostToDevice);
	cudaMemcpy(&(d_structA->latitude_deg), &(structA.latitude_deg), sizeof(float), cudaMemcpyHostToDevice);

	printf("(BEFORE) structA.latitude_deg = %f\n", structA.latitude_deg);

	printf("(BEFORE) c = %f\n", c);

	gpuTest_func1_struct<<<1, 1>>>(d_structA);

	// Does not work
	//gpuTest_func2<<<1, 1>>>();

	printf("(AFTER) c = %f\n", c);

	//cudaMemcpy(&structA, d_structA, sizeof(TestKernelParameters), cudaMemcpyDeviceToHost);
	cudaMemcpy(&(structA.latitude_deg), &(d_structA->latitude_deg), sizeof(float), cudaMemcpyDeviceToHost);

	printf("(AFTER) structA.latitude_deg = %f\n", structA.latitude_deg);
	printf("(AFTER cudaMemcpy) c = %f\n", c);






	cudaFree(d_a);
	cudaFree(d_b);
	cudaFree(d_c);
	cudaFree(d_structA);

	return 0;
}
*/














