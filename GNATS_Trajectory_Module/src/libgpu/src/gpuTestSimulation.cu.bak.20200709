#include "gpuTestSimulation.h"

#include "cuda_compat.h"

#include "cuda_runtime_api.h"
#include "device_functions.h"

#include "CUDA_Aircraft_new.h"

#include <iostream>
#include <cstdio>

__device__ float *dev_a, *dev_b, *dev_c;

__device__ CUDA_Aircraft_new* dev_cudaObj;






__global__ void gpuTest_func1(float* a, float* b, float* c) {
	printf("gpuTest_func1() starting\n");

	*c = *a + *b;
}

__device__ void gpuTest_func2_layer2() {
	printf("gpuTest_func2_layer2() starting\n");

	*dev_c = *dev_a + *dev_b;
	printf("gpuTest_func2_layer2() --> dev_c = %f\n", *dev_c);
}

__global__ void gpuTest_func2() {
	printf("gpuTest_func2() starting\n");

	gpuTest_func2_layer2();
	//*dev_c = *dev_a + *dev_b;
}

__global__ void gpuTest_func3(CUDA_Aircraft_new* objPtr) {
	printf("gpuTest_func3() starting\n");

	if (objPtr == NULL)
		printf("gpuTest_func3() --> objPtr is NULL\n");
	else
		printf("gpuTest_func3() --> objPtr is NOT NULL\n");

	if (objPtr == NULL)

	objPtr->latitude_deg[0] = 55.5;
}






/*
int propagate_flights_gpuTest(const float& input_t_end,
		const float& input_t_step,
		const float& input_t_step_terminal,
		const float& input_t_step_airborne) {
	float a, b, c;// host copies of a, b, c
	float *d_a, *d_b, *d_c;// device copies of a, b, c

	int size = sizeof(float);// Allocate space for device copies of a, b, c

	cudaMalloc((void**)&d_a, size);
	cudaMalloc((void**)&d_b, size);
	cudaMalloc((void**)&d_c, size);

	a = 2;
	b = 7;

	cudaMemcpy(d_a, &a, size, cudaMemcpyHostToDevice);
	cudaMemcpy(d_b, &b, size, cudaMemcpyHostToDevice);


	printf("(BEFORE) c = %f\n", c);

	gpuTest_func1<<<1, 1>>>(d_a, d_b, d_c);


	printf("(AFTER) c = %f\n", c);

	cudaMemcpy(&c, d_c, size, cudaMemcpyDeviceToHost);

	printf("(AFTER cudaMemcpy) c = %f\n", c);






	cudaFree(d_a);
	cudaFree(d_b);
	cudaFree(d_c);

	return 0;
}
*/








/*
int propagate_flights_gpuTest(const float& input_t_end,
		const float& input_t_step,
		const float& input_t_step_terminal,
		const float& input_t_step_airborne) {
	float a, b, c;// host copies of a, b, c


	int size = sizeof(float);// Allocate space for device copies of a, b, c

	cudaMalloc((void**)&dev_a, size);
	cudaMalloc((void**)&dev_b, size);
	cudaMalloc((void**)&dev_c, size);

	a = 2;
	b = 7;

	cudaMemcpy(dev_a, &a, size, cudaMemcpyHostToDevice);
	cudaMemcpy(dev_b, &b, size, cudaMemcpyHostToDevice);

	gpuTest_func1<<<1, 1>>>(dev_a, dev_b, dev_c);

	cudaMemcpy(&c, dev_c, size, cudaMemcpyDeviceToHost);

	printf("(AFTER cudaMemcpy) c = %f\n", c);






	cudaFree(dev_a);
	cudaFree(dev_b);
	cudaFree(dev_c);

	return 0;
}
*/




static void setCudaValue() {
	float a, b, c;// host copies of a, b, c

	int size = sizeof(float);// Allocate space for device copies of a, b, c

	cudaMalloc((void**)&dev_a, size);
	cudaMalloc((void**)&dev_b, size);
	cudaMalloc((void**)&dev_c, size);

	a = 2;
	b = 7;

	cudaMemcpy(dev_a, &a, size, cudaMemcpyHostToDevice);
	cudaMemcpy(dev_b, &b, size, cudaMemcpyHostToDevice);


}

static void getCudaValue() {
	float a, b, c;// host copies of a, b, c

	int size = sizeof(float);// Allocate space for device copies of a, b, c

	cudaMemcpy(&c, dev_c, size, cudaMemcpyDeviceToHost);

	printf("(AFTER cudaMemcpy) c = %f\n", c);
}

int propagate_flights_gpuTest(const float& input_t_end,
		const float& input_t_step,
		const float& input_t_step_terminal,
		const float& input_t_step_airborne) {
	float a, b, c;// host copies of a, b, c


	int size = sizeof(float);// Allocate space for device copies of a, b, c


	setCudaValue();

	gpuTest_func2<<<1, 1>>>();

	getCudaValue();








	cudaFree(dev_a);
	cudaFree(dev_b);
	cudaFree(dev_c);

	return 0;
}






/*
int propagate_flights_gpuTest(const float& input_t_end,
		const float& input_t_step,
		const float& input_t_step_terminal,
		const float& input_t_step_airborne) {
	float a, b, c;// host copies of a, b, c
	CUDA_Aircraft_new host_cudaObj;

	int size = sizeof(float);// Allocate space for device copies of a, b, c

	cudaMalloc((void**)&dev_a, size);
	cudaMalloc((void**)&dev_b, size);
	cudaMalloc((void**)&dev_c, size);

	cudaMalloc((void**)&dev_cudaObj, sizeof(CUDA_Aircraft_new));

	a = 2;
	b = 7;

	cudaMemcpy(dev_a, &a, size, cudaMemcpyHostToDevice);
	cudaMemcpy(dev_b, &b, size, cudaMemcpyHostToDevice);

	printf("111111111111111111111111111111111111111111111\n");

	gpuTest_func3<<<1, 1>>>(dev_cudaObj);


	cudaMemcpy(&host_cudaObj, dev_cudaObj, sizeof(CUDA_Aircraft_new), cudaMemcpyDeviceToHost);

	printf("(AFTER cudaMemcpy) host_cudaObj.latitude_deg[0] = %f\n", host_cudaObj.latitude_deg[0]);






	cudaFree(dev_a);
	cudaFree(dev_b);
	cudaFree(dev_c);

	cudaFree(dev_cudaObj);

	return 0;
}
*/
