#
# Makefile
#
# This makefile builds a 64-bit Linux executable

# Build CPU version by default.  This can be overridden by supplying
# USE_GPU=1 to the make command
USE_GPU=0

# Compilers to use
CXX=g++

NVCC=nvcc

# CUDA installation directory.
CUDA_INSTALL_DIR=/usr/local/cuda

# Executable name
EXECUTABLE=wind_tool.exe

# Build version
MAJOR=1
MINOR=0

# Automatically build the source file list by searcing for all
# files in this directory (src) that have a .cpp or .cu extension
SOURCES=$(shell dir *.cpp *.cu /b)
HEADERS=$(shell dir *.h /b)

# Automatically build the object file list from the source
# file list by changing the extension from .cpp to .o
TMPOBJS=$(SOURCES:.cpp=.o)
OBJS=$(TMPOBJS:.cu=.o)

# Set compiler and linker flags
CXXFLAGS=-g -O3 -std=c++11 -fPIC -Wall -Wextra -D_POSIX_SOURCE=1
LDFLAGS=-L../lib_win -L../../../lib_win

LIBS= "../../../lib_win/grib_api_lib.dll" -lcommon -lhdf5 -Wl,--whole-archive -lwind -Wl,--no-whole-archive -ljasper -ljpeg

INCLUDE_DIRS=-I../include -I../../../include/libcommon -I../../../include/libwind -I../../libwind/third-party/hdf5install_win/include -I../../libwind/third-party/grib_api_win/include -I"C:/msys64/mingw64/include" -I"C:/msys64/mingw64/include/c++/9.2.0"

NVCC_CFLAGS=-O3 -arch=sm_35 -lineinfo -Xcompiler '-g -O3 -fPIC -Wall -Wextra'

# If ENABLE_DEBUG is set then undefine the preprocessor macro NDEBUG
# otherwise define it
ifeq ($(ENABLE_DEBUG),1)
else
CPPFLAGS += -DNDEBUG
endif

# If USE_GPU is set then append the C++ macro USE_GPU to
# the preprocessor flags so that it gets defined in the source
ifeq ($(USE_GPU),1)
CPPFLAGS += -DUSE_GPU=1
else
CPPFLAGS += -UUSE_GPU
endif

# If USE_GPU is set then append the cuda installation directory
# to the LDFLAGS and cuda libraries to LIBS
ifeq ($(USE_GPU),1)
INCLUDE_DIRS += -I$(CUDA_INSTALL_DIR)/include
LDFLAGS += -L$(CUDA_INSTALL_DIR)/lib64
LIBS += -lcudart
else
CXXFLAGS += -fopenmp
LDFLAGS += -fopenmp
LIBS +=
endif

# If USE_GPU is set then set the build directory to gpu
# else set the build directory to cpp.
ifeq ($(USE_GPU),1)
BUILD_DIR=../build/gpu
else
BUILD_DIR=../build/cpp
endif

# Distribution locations
DIST_DIR=../dist/$(EXECUTABLE)-$(MAJOR).$(MINOR)
DIST_LIB_DIR=$(DIST_DIR)/lib_win
DIST_INCLUDE_DIR=$(DIST_DIR)/include/$(EXECUTABLE)
DIST_SHARE_DIR=$(DIST_DIR)/share
DIST_BIN_DIR=$(DIST_DIR)/bin

# List of phony targets
.PHONY: clean init init_dist

# Specify suffixes used by implicit build rules
.SUFFIXES:
.SUFFIXES: .cu .cpp .o

# Implicit build rule to compile CUDA .cu files to .o files using
# nvcc if USE_GPU is set or with g++ if it is not set.
.cu.o:
ifeq ($(USE_GPU),1)
	$(NVCC) $(NVCC_CFLAGS) $(CPPFLAGS) $(INCLUDE_DIRS) -c -o $@ $<
else
	$(CXX) $(CXXFLAGS) -x c++ $(CPPFLAGS) $(INCLUDE_DIRS) -c -o $@ $<
endif

# Implicit build rule to compile .cpp files to .o files using g++
.cpp.o:
	$(CXX) $(CXXFLAGS) -x c++ $(CPPFLAGS) $(INCLUDE_DIRS) -c -o $@ $<

# Default build rule, build ngcs
all: $(EXECUTABLE)

# Init directories
init:

# Make dependencies
deps:
	$(MAKE) -C ../../libwind/src -f makefile_win

# compile the executable
compile: deps $(OBJS)
	$(CXX) $(LDFLAGS) -o $(EXECUTABLE) $(OBJS) $(LIBS)

# create a symlink to the executable in the top-level bin directory
install_local: init compile
	copy /Y $(EXECUTABLE) "../../../bin/"
	
# Build the executable and copy the built object to the local
# bin directory and create a symlink in the top-level bin directory
$(EXECUTABLE): compile install_local

# Remove all compiled objects, executables, and libraries
clean:
	-rmdir "$(BUILD_DIR)" /S /Q
	-del /F *.o
	-del /F $(EXECUTABLE)
	
# Clean and remove the dist directory
distclean: clean
	-rmdir "../dist" /S /Q

# Copy distribution files and update top-level symlinks
# this project depends on liblektor being built and dist
dist:
	mkdir -p $(DIST_BIN_DIR) && mkdir -p $(DIST_INCLUDE_DIR) && mkdir -p $(DIST_LIB_DIR) && mkdir -p $(DIST_SHARE_DIR) && make && cp $(EXECUTABLE) $(DIST_BIN_DIR)/. && cp wind_tool.conf $(DIST_BIN_DIR)/. && cp -rf ../share/* $(DIST_SHARE_DIR)/. && find $(DIST_DIR) -name '.svn' | xargs rm -rf
#../../../scripts/create_symlinks.sh $(EXECUTABLE)

archive_dist: dist
	cd ../dist && tar czf $(EXECUTABLE)-$(MAJOR).$(MINOR).tar.gz $(EXECUTABLE)-$(MAJOR).$(MINOR)
